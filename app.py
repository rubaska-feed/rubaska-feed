from flask import Flask, Response
import xml.etree.ElementTree as ET
import json

app = Flask(__name__)

def load_products_from_bulk(filepath):
    products_raw = {}
    variants = {}
    images = {}
    metafields = {}

    with open(filepath, "r", encoding="utf-8") as f:
        for line in f:
            obj = json.loads(line)
            obj_id = obj.get("id", "")
            parent_id = obj.get("__parentId")

            if "Product" in obj_id and not parent_id:
                products_raw[obj_id] = obj
            elif "ProductVariant" in obj_id and parent_id:
                variants.setdefault(parent_id, []).append({"node": obj})
            elif "originalSrc" in obj and parent_id:
                images.setdefault(parent_id, []).append({"node": {"src": obj["originalSrc"]}})
            elif obj.get("namespace") == "custom" and parent_id:
                metafields.setdefault(parent_id, []).append({"node": obj})

    structured_products = []
    for pid, product in products_raw.items():
        product["variants"] = {"edges": variants.get(pid, [])}
        product["images"] = {"edges": images.get(pid, [])}
        product["metafields"] = {"edges": metafields.get(pid, [])}
        structured_products.append(product)

    return structured_products


# ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –º–µ—Ç–∞—Ñ–∏–ª–¥–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
default_metafields_by_category = {
    "–ß–æ–ª–æ–≤—ñ—á—ñ —Å–æ—Ä–æ—á–∫–∏": {
        "–í–∏–¥ –∏–∑–¥–µ–ª–∏—è": "–°–æ—Ä–æ—á–∫–∞",
        "–ó–∞—Å—Ç–µ–∂–∫–∞": "–ì—É–¥–∑–∏–∫–∏",
        "–¢–∏–ø —Ç–∫–∞–Ω–∏–Ω–∏": "–ë–∞–≤–æ–≤–Ω–∞",
        "–¢–∏–ø –∫—Ä–æ—é": "–ü—Ä–∏—Ç–∞–ª–µ–Ω–∞",
        "–§–∞—Å–æ–Ω —Ä—É–∫–∞–≤–∞": "–î–æ–≤–≥–∏–π",
        "–ú–∞–Ω–∂–µ—Ç —Å–æ—Ä–æ—á–∫–∏": "–ó –¥–≤–æ–º–∞ –≥—É–¥–∑–∏–∫–∞–º–∏",
        "–°—Ç–∏–ª—å": "Casual",
        "–í—ñ–∑–µ—Ä—É–Ω–∫–∏ —ñ –ø—Ä–∏–Ω—Ç–∏": "–ë–µ–∑ –≤—ñ–∑–µ—Ä—É–Ω–∫—ñ–≤ —ñ –ø—Ä–∏–Ω—Ç—ñ–≤",
        "–°–∫–ª–∞–¥": "95% –±–∞–≤–æ–≤–Ω–∞ 5% —Å—Ç—Ä–µ—Ç—á",
        "–ö–∏—à–µ–Ω—ñ": ""
    },
    "–ß–æ–ª–æ–≤—ñ—á—ñ —Ñ—É—Ç–±–æ–ª–∫–∏ —Ç–∞ –º–∞–π–∫–∏": {
        "–í–∏–¥ –∏–∑–¥–µ–ª–∏—è": "–§—É—Ç–±–æ–ª–∫–∞",
        "–ú–æ–¥–µ–ª—å": "–ü–æ–ª–æ",
        "–¢–∏–ø —Ç–∫–∞–Ω–∏–Ω–∏": "–ë–∞–≤–æ–≤–Ω–∞",
        "–°–∏–ª—É–µ—Ç": "–ü—Ä—è–º–∏–π",
        "–§–∞—Å–æ–Ω –≤–∏—Ä—ñ–∑—É –≥–æ—Ä–ª–æ–≤–∏–Ω–∏": "V-–ø–æ–¥—ñ–±–Ω–∏–π",
        "–í—ñ–∑–µ—Ä—É–Ω–∫–∏ —ñ –ø—Ä–∏–Ω—Ç–∏": "–ë–µ–∑ –≤—ñ–∑–µ—Ä—É–Ω–∫—ñ–≤ —ñ –ø—Ä–∏–Ω—Ç—ñ–≤",
        "–°—Ç–∏–ª—å": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π",
        "–°–∫–ª–∞–¥": "100% –±–∞–≤–æ–≤–Ω–∞"
        
    },
    "–°–≤—è—Ç–∫–æ–≤—ñ –∂–∏–ª–µ—Ç–∏": {
        "–í–∏–¥ –∏–∑–¥–µ–ª–∏—è": "–ñ–∏–ª–µ—Ç",
        "–¢–∏–ø —Ç–∫–∞–Ω–∏–Ω–∏": "–¢—Ä–∏–∫–æ—Ç–∞–∂",
        "–¢–∏–ø –∫—Ä–æ—é": "–î—ñ–ª–æ–≤–∏–π",
        "–°—Ç–∏–ª—å": "–°–≤—è—Ç–∫–æ–≤–∏–π",
        "–°–∫–ª–∞–¥": "–ü–æ–ª—ñ–µ—Å—Ç–µ—Ä 70%, –í—ñ—Å–∫–æ–∑–∞ 30%",
        "–ö–∏—à–µ–Ω—ñ": "–§–∞–ª—å—à"
    }
}

# üëá –ê –ø–æ—Ç–æ–º —É–∂–µ –∏–¥—ë—Ç —Ñ—É–Ω–∫—Ü–∏—è
def generate_xml(products):
    ...




def generate_xml(products):
    ET.register_namespace("g", "http://base.google.com/ns/1.0")
    rss = ET.Element("rss", {"version": "2.0"})
    shop = ET.SubElement(rss, "shop")

    ET.SubElement(shop, "name").text = '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω "Rubaska"'
    ET.SubElement(shop, "company").text = "Rubaska"
    ET.SubElement(shop, "url").text = "https://rubaska.com/"

    category_info = {
        "–°–æ—Ä–æ—á–∫–∞": {
            "category_id": "129880800", "parent_id": "129880784",
            "group_name": "–ß–æ–ª–æ–≤—ñ—á—ñ —Å–æ—Ä–æ—á–∫–∏",
            "portal_url": "https://prom.ua/Muzhskie-rubashki",
            "subdivision_id": "348"
        },
        "–¢–µ–Ω—ñ—Å–∫–∞": {
            "category_id": "129880800",
            "parent_id": "129880784",
            "group_name": "–ß–æ–ª–æ–≤—ñ—á—ñ —Å–æ—Ä–æ—á–∫–∏",
            "portal_url": "https://prom.ua/Muzhskie-rubashki",
            "subdivision_id": "348"
        },
        "–§—É—Ç–±–æ–ª–∫–∞": {
            "category_id": "129880791",
            "parent_id": "129880784",
            "group_name": "–ß–æ–ª–æ–≤—ñ—á—ñ —Ñ—É—Ç–±–æ–ª–∫–∏ —Ç–∞ –º–∞–π–∫–∏",
            "portal_url": "https://prom.ua/Futbolki-muzhskie",
            "subdivision_id": "35506"
        },
        "–ñ–∏–ª–µ—Ç": {
            "category_id": "129883725",
            "parent_id": "129880784",
            "group_name": "–°–≤—è—Ç–∫–æ–≤—ñ –∂–∏–ª–µ—Ç–∏",
            "portal_url": "https://prom.ua/ua/Muzhskie-zhiletki-i-bezrukavki-1",
            "subdivision_id": "35513"
        },
    }

    categories = ET.SubElement(shop, "categories")
    for cat in category_info.values():
        ET.SubElement(categories, "category", id=cat["category_id"], parentId=cat["parent_id"]).text = cat["group_name"]

    offers = ET.SubElement(shop, "offers")

    for product in products:
        

        metafields = {
            m["node"]["key"]: m["node"]["value"]
            for m in product.get("metafields", {}).get("edges", [])
            if m["node"]["namespace"] == "custom"
        }
        # –ü–æ–ª—É—á–∞–µ–º 'product_type_raw' –∏–∑ –º–µ—Ç–∞—Ñ–∏–ª–¥–æ–≤, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ
        product_type_raw = metafields.get("product_type_raw") or product.get("productType", "").strip()
        product_type = product_type_raw or "–°–æ—Ä–æ—á–∫–∞"
        category = category_info.get(product_type, category_info["–°–æ—Ä–æ—á–∫–∞"])


        for variant in product.get("variants", {}).get("edges", []):
            v = variant["node"]
            if not v.get("availableForSale", True):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
            safe_id = str(int(v["id"].split("/")[-1]) % 1000000000)
            title_parts = v.get("title", "").split(" / ")
            size = title_parts[0] if len(title_parts) > 0 else "M"
            color = title_parts[1] if len(title_parts) > 1 else "–ù–µ–≤—ñ–¥–æ–º–æ"
            collar = title_parts[2] if len(title_parts) > 2 else "–ö–ª–∞—Å–∏—á–Ω–∏–π"
            available = "true" if v.get("availableForSale", True) else "false"

            offer = ET.SubElement(offers, "offer", {
                "id": safe_id,
                "available": available,
                "in_stock": "true" if available == "true" else "false",
                "type": "vendor.model",
                "selling_type": "r",
                "group_id": safe_id
            })

            # ‚úÖ –î–æ–±–∞–≤–∏—Ç—å portal_category_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞—Ñ–∏–ª–¥–∞ product_type_raw –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            category_name = metafields.get("product_type_raw") or product.get("productType", "").strip() or "–°–æ—Ä–æ—á–∫–∞"
            category = category_info.get(category_name, category_info["–°–æ—Ä–æ—á–∫–∞"])
    


            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ availability
            availability_status = "in stock" if available == "true" else "out of stock"
            ET.SubElement(offer, "{http://base.google.com/ns/1.0}availability").text = availability_status


            
            ET.SubElement(offer, "name").text = product["title"]
            ET.SubElement(offer, "name_ua").text = product["title"]
            desc = (
                product.get("bodyHtml")
                or product.get("descriptionHtml")
                or product.get("description")
                or "–û–ø–∏—Å –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
            )
            desc_ua = product.get("description_ua") or desc


            ET.SubElement(offer, "description").text = f"<![CDATA[{desc}]]>"
            ET.SubElement(offer, "description_ua").text = f"<![CDATA[{desc_ua}]]>"

            ET.SubElement(offer, "url").text = f"https://rubaska.com/products/{product['handle']}"

            for img in product.get("images", {}).get("edges", []):
                ET.SubElement(offer, "picture").text = img["node"]["src"]

            ET.SubElement(offer, "price").text = v.get("price", "0")
            ET.SubElement(offer, "currencyId").text = "UAH"
            ET.SubElement(offer, "param", name="–î–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ç–æ–≤–∞—Ä").text = "–û–¥–µ—Å—Å–∞"
            ET.SubElement(offer, "categoryId").text = category["category_id"]
            ET.SubElement(offer, "portal_category_id").text = category["subdivision_id"]  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
            ET.SubElement(offer, "portal_category_url").text = category["portal_url"]  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
            ET.SubElement(offer, "vendor").text = product.get("vendor", "RUBASKA")
            model_prefix = product_type_raw or "–°–æ—Ä–æ—á–∫–∞"
            model_title = v.get("title", "").strip() or "–ë–µ–∑ –º–æ–¥–µ–ª—ñ"
            ET.SubElement(offer, "model").text = f"{model_prefix} {model_title}"
            ET.SubElement(offer, "vendorCode").text = v.get("sku") or safe_id
            ET.SubElement(offer, "param", name="–ö–æ–ª—ñ—Ä").text = color
            ET.SubElement(offer, "param", name="–†–æ–∑–º—ñ—Ä").text = size
            ET.SubElement(offer, "param", name="–¢–∏–ø —Å–æ—Ä–æ—á–∫–æ–≤–æ–≥–æ –∫–æ–º—ñ—Ä–∞").text = collar
            ET.SubElement(offer, "param", name="–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ä–æ–∑–º—ñ—Ä").text = size
            ET.SubElement(offer, "param", name="–°—Ç–∞–Ω").text = "–ù–æ–≤–∏–π"            
            ET.SubElement(offer, "param", name="–ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏–∫").text = "–¢—É—Ä–µ—á—á–∏–Ω–∞"


            # –†–∞–∑–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è "–°–æ—Ä–æ—á–∫–∞"
            if category["group_name"] == "–ß–æ–ª–æ–≤—ñ—á—ñ —Å–æ—Ä–æ—á–∫–∏":
                measurements = {
                    "S":   {"–û–±—Ö–≤–∞—Ç —à–µ–∏": "38", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏": "98",  "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏": "90", "–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –∏–∑–¥–µ–ª–∏—è": "63", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "44"},
                    "M":   {"–û–±—Ö–≤–∞—Ç —à–µ–∏": "39", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏": "104", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏": "96", "–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –∏–∑–¥–µ–ª–∏—è": "64", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "46"},
                    "L":   {"–û–±—Ö–≤–∞—Ç —à–µ–∏": "41", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏": "108", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏": "100", "–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –∏–∑–¥–µ–ª–∏—è": "65", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "48"},
                    "XL":  {"–û–±—Ö–≤–∞—Ç —à–µ–∏": "43", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏": "112", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏": "108", "–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –∏–∑–¥–µ–ª–∏—è": "66", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "50"},
                    "XXL": {"–û–±—Ö–≤–∞—Ç —à–µ–∏": "45", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏": "120", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏": "112", "–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –∏–∑–¥–µ–ª–∏—è": "67", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "52"},
                    "3XL": {"–û–±—Ö–≤–∞—Ç —à–µ–∏": "46", "–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏": "126", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏": "124", "–î–ª–∏–Ω–∞ —Ä—É–∫–∞–≤–∞ –∏–∑–¥–µ–ª–∏—è": "68", "–†–æ–∑–º—ñ—Ä–∏ —á–æ–ª–æ–≤—ñ—á–∏—Ö —Å–æ—Ä–æ—á–æ–∫": "54"},
                }
                for label, value in measurements.get(size, {}).items():
                    ET.SubElement(offer, "param", name=label).text = value


            # üëâ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è "–§—É—Ç–±–æ–ª–∫–∞"
            elif category["group_name"] == "–ß–æ–ª–æ–≤—ñ—á—ñ —Ñ—É—Ç–±–æ–ª–∫–∏ —Ç–∞ –º–∞–π–∫–∏":
                measurements = {
                    "S":   {"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó—É": ""},
                    "M":   {"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó—É": ""},
                    "L":   {"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó—É": ""},
                    "XL":   {"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó—É": ""},
                    "XXL":   {"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó—É": ""},
                     "3XL":   {"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–µ–π": "", "–û–±—Ö–≤–∞—Ç —Ç–∞–ª—ñ—ó—É": ""},
                }
                for label, value in measurements.get(size, {}).items():
                    ET.SubElement(offer, "param", name=label).text = value





            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –º–µ—Ç–∞—Ñ–∏–ª–¥–æ–≤
            field_mapping = {
                "–í–∏–¥ –≤–∏—Ä–æ–±—É": "product_type_raw",
                "–ó–∞—Å—Ç–µ–∂–∫–∞": "fastening",
                "–¢–∏–ø —Ç–∫–∞–Ω–∏–Ω–∏": "fabric_type",
                "–¢–∏–ø –∫—Ä–æ—é": "cut_type",
                "–§–∞—Å–æ–Ω —Ä—É–∫–∞–≤–∞": "sleeve_style",
                "–í—ñ–∑–µ—Ä—É–Ω–∫–∏ —ñ –ø—Ä–∏–Ω—Ç–∏": "pattern_and_prints",
                "–ú–∞–Ω–∂–µ—Ç —Å–æ—Ä–æ—á–∫–∏": "shirt_cuff",
                "–°—Ç–∏–ª—å": "style",
                "–°–∫–ª–∞–¥": "fabric_composition",
                "–ö–∏—à–µ–Ω—ñ": "pockets",
            
            }

            for label, key in field_mapping.items():
                value = metafields.get(key)
                if value:
                    ET.SubElement(offer, "param", name=label).text = value

            for label, key in field_mapping.items():
                value = metafields.get(key)
                if not value and key == "product_type_raw":
                    value = product_type_raw  # –µ—Å–ª–∏ –≤ –º–µ—Ç–∞—Ñ–∏–ª–¥–µ –ø—É—Å—Ç–æ, –Ω–æ product_type_raw –µ—Å—Ç—å
                if value:
                    ET.SubElement(offer, "param", name=label).text = value




                    

    return ET.tostring(rss, encoding="utf-8")

@app.route("/feed.xml")
def feed():
    products = load_products_from_bulk("bulk_products.jsonl")
    xml_data = generate_xml(products)
    return Response(xml_data, mimetype="application/xml")



if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5050)
